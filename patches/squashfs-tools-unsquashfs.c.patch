--- squashfs-tools/unsquashfs.c	2016-08-25 09:06:22.983529595 -0400
+++ squashfs-tools-patched/unsquashfs.c	2016-08-25 09:06:03.223530354 -0400
@@ -32,7 +32,8 @@
 #include "stdarg.h"

 #include <sys/sysinfo.h>
 #include <sys/types.h>
+#include <sys/sysmacros.h>
 #include <sys/time.h>
 #include <sys/resource.h>
 #include <limits.h>
@@ -44,13 +45,19 @@
 pthread_mutex_t	fragment_mutex;
 
 /* user options that control parallelisation */
-int processors = -1;
+//int processors = -1;
+// CJH: Temporarily set the default processor count to 1 to prevent threading bug
+//      until a proper fix is implemented.
+int processors = 1;
 
 struct super_block sBlk;
 squashfs_operations s_ops;
-struct compressor *comp;
-
-int bytes = 0, swap, file_count = 0, dir_count = 0, sym_count = 0,
+// CJH: Initialize to NULL
+struct compressor *comp = NULL;
+// CJH: Add override struct
+struct override_table override = { 0 };
+// CJH: Initialize swap to -1
+int bytes = 0, swap = -1, file_count = 0, dir_count = 0, sym_count = 0,
 	dev_count = 0, fifo_count = 0;
 char *inode_table = NULL, *directory_table = NULL;
 struct hash_table_entry *inode_table_hash[65536], *directory_table_hash[65536];
@@ -701,8 +708,9 @@
 			outlen, &error);
 
 		if(res == -1) {
-			ERROR("%s uncompress failed with error code %d\n",
-				comp->name, error);
+            // CJH: Compression errors are displayed elsewhere
+			//ERROR("%s uncompress failed with error code %d\n",
+			//	comp->name, error);
 			goto failed;
 		}
 	} else {
@@ -720,7 +728,10 @@
 	 * is of the expected size
 	 */
 	if(expected && expected != res)
+    {
+        ERROR("Decompressed size did not match the expected size! [%d != %d]\n", res, expected);
 		return 0;
+    }
 	else
 		return res;
 
@@ -747,8 +758,9 @@
 			block_size, &error);
 
 		if(res == -1) {
-			ERROR("%s uncompress failed with error code %d\n",
-				comp->name, error);
+            // CJH: Compression errors are displayed elsewhere
+			//ERROR("%s uncompress failed with error code %d\n",
+			//	comp->name, error);
 			goto failed;
 		}
 
@@ -1622,7 +1634,7 @@
 	dir_count ++;
 }
 
-
+// CJH: s/TRACE/printf/g
 void squashfs_stat(char *source)
 {
 	time_t mkfs_time = (time_t) sBlk.s.mkfs_time;
@@ -1640,9 +1652,10 @@
 
 	printf("Creation or last append time %s", mkfs_str ? mkfs_str :
 		"failed to get time\n");
-	printf("Filesystem size %.2f Kbytes (%.2f Mbytes)\n",
-		sBlk.s.bytes_used / 1024.0, sBlk.s.bytes_used /
-		(1024.0 * 1024.0));
+    // CJH: Added bytes output
+	printf("Filesystem size %.2f Kbytes (%.2f Mbytes) (%lld [0x%llX] bytes)\n",
+		(sBlk.s.bytes_used / 1024.0), (sBlk.s.bytes_used / (1024.0 * 1024.0)), 
+        sBlk.s.bytes_used, sBlk.s.bytes_used);
 
 	if(sBlk.s.s_major == 4) {
 		printf("Compression %s\n", comp->name);
@@ -1714,25 +1727,25 @@
 		printf("Number of gids %d\n", sBlk.no_guids);
 	}
 
-	TRACE("sBlk.s.inode_table_start 0x%llx\n", sBlk.s.inode_table_start);
-	TRACE("sBlk.s.directory_table_start 0x%llx\n",
+	printf("sBlk.s.inode_table_start 0x%llx\n", sBlk.s.inode_table_start);
+	printf("sBlk.s.directory_table_start 0x%llx\n",
 		sBlk.s.directory_table_start);
 
 	if(sBlk.s.s_major > 1)
-		TRACE("sBlk.s.fragment_table_start 0x%llx\n\n",
+		printf("sBlk.s.fragment_table_start 0x%llx\n",
 			sBlk.s.fragment_table_start);
 
 	if(sBlk.s.s_major > 2)
-		TRACE("sBlk.s.lookup_table_start 0x%llx\n\n",
+		printf("sBlk.s.lookup_table_start 0x%llx\n",
 			sBlk.s.lookup_table_start);
 
 	if(sBlk.s.s_major == 4) {
-		TRACE("sBlk.s.id_table_start 0x%llx\n", sBlk.s.id_table_start);
-		TRACE("sBlk.s.xattr_id_table_start 0x%llx\n",
+		printf("sBlk.s.id_table_start 0x%llx\n", sBlk.s.id_table_start);
+		printf("sBlk.s.xattr_id_table_start 0x%llx\n",
 			sBlk.s.xattr_id_table_start);
 	} else {
-		TRACE("sBlk.uid_start 0x%llx\n", sBlk.uid_start);
-		TRACE("sBlk.guid_start 0x%llx\n", sBlk.guid_start);
+		printf("sBlk.uid_start 0x%llx\n", sBlk.uid_start);
+		printf("sBlk.guid_start 0x%llx\n", sBlk.guid_start);
 	}
 }
 
@@ -1745,9 +1758,11 @@
 	if(!comp->supported) {
 		ERROR("Filesystem uses %s compression, this is "
 			"unsupported by this version\n", comp->name);
-		ERROR("Decompressors available:\n");
-		display_compressors("", "");
-		return 0;
+        // CJH: Try to continue anyway
+		//ERROR("Decompressors available:\n");
+		//display_compressors("", "");
+		//return 0;
+        return 1;
 	}
 
 	/*
@@ -1777,17 +1792,75 @@
 {
 	squashfs_super_block_3 sBlk_3;
 	struct squashfs_super_block sBlk_4;
+    // CJH: Added this structure for auto-swap detection
+    struct squashfs_generic_super_block generic = { 0 };
+
+    // CJH: Perform swap auto-detection
+    if(swap == -1)
+    {
+        read_fs_bytes(fd, SQUASHFS_START, sizeof(struct squashfs_generic_super_block),
+            &generic);
+        /*
+         * If the major version is greater than or less than the min/max version numbers
+         * or if the least significant bytes of the inode count field is 0, then the
+         * image endianess is probably opposite of the host system.
+         *
+         * Note that these are the only fields besides s_magic that are common among 
+         * all versions of the SquashFS super block structures, and s_magic cannot
+         * be relied on as it is commonly mucked with by vendors.
+         */
+        if(generic.s_major < SQUASHFS_MIN_VERSION ||
+           generic.s_major > SQUASHFS_MAX_VERSION ||
+           (generic.inodes & 0xFF) == 0)
+        {
+            ERROR("SquashFS version [%d.%d] / inode count [%d] suggests a SquashFS image "
+                  "of a different endianess\n", generic.s_major, generic.s_minor, generic.inodes);
+            swap = 1;
+        }
+        else
+        {
+            ERROR("SquashFS version [%d.%d] / inode count [%d] suggests a SquashFS image "
+                  "of the same endianess\n", generic.s_major, generic.s_minor, generic.inodes);
+            swap = 0;
+        }
+    }
+    
+    // CJH: Warn if SquashFS magic doesn't look correct
+    if(generic.s_magic != SQUASHFS_MAGIC && generic.s_magic != SQUASHFS_MAGIC_SWAP)
+    {
+        ERROR("Non-standard SquashFS Magic: %.4s\n", (char *) &generic.s_magic);
+    }
+
+    // CJH: Notify if endianess is different
+    if(swap) {
+        ERROR("Reading a different endian SQUASHFS filesystem on %s\n", source);
+    }
 
 	/*
 	 * Try to read a Squashfs 4 superblock
 	 */
 	read_fs_bytes(fd, SQUASHFS_START, sizeof(struct squashfs_super_block),
 		&sBlk_4);
-	swap = sBlk_4.s_magic != SQUASHFS_MAGIC;
+	// CJH: swap detection already done generically above
+    //swap = sBlk_4.s_magic != SQUASHFS_MAGIC;
 	SQUASHFS_INSWAP_SUPER_BLOCK(&sBlk_4);
 
+    /*
+     * CJH: Don't consider it an error if SQUASHFS_MAGIC doesn't match
 	if(sBlk_4.s_magic == SQUASHFS_MAGIC && sBlk_4.s_major == 4 &&
 			sBlk_4.s_minor == 0) {
+     */
+
+     // CJH: Added s_major override
+     if((sBlk_4.s_major == 4 && sBlk_4.s_minor == 0) ||
+        (override.s_major == 4)) {
+
+        // CJH: Update super struct with override values
+        if(override.s_major)
+            sBlk_4.s_major = override.s_major;
+        if(override.s_minor)
+            sBlk_4.s_minor = override.s_minor;
+
 		s_ops.squashfs_opendir = squashfs_opendir_4;
 		s_ops.read_fragment = read_fragment_4;
 		s_ops.read_fragment_table = read_fragment_table_4;
@@ -1799,7 +1872,11 @@
 		/*
 		 * Check the compression type
 		 */
+        // CJH: Check to see if comp has alredy been defined
+		if(!comp)
+        {
 		comp = lookup_compressor_id(sBlk.s.compression);
+        }
 		return TRUE;
 	}
 
@@ -1813,6 +1890,9 @@
 	/*
 	 * Check it is a SQUASHFS superblock
 	 */
+	/*
+	 * CJH: swap detection already done generically above
+     *
 	swap = 0;
 	if(sBlk_3.s_magic != SQUASHFS_MAGIC) {
 		if(sBlk_3.s_magic == SQUASHFS_MAGIC_SWAP) {
@@ -1828,6 +1908,13 @@
 			goto failed_mount;
 		}
 	}
+    */
+    if(swap)
+    {
+        squashfs_super_block_3 sblk;
+        SQUASHFS_SWAP_SUPER_BLOCK_3(&sblk, &sBlk_3);
+        memcpy(&sBlk_3, &sblk, sizeof(squashfs_super_block_3));
+    }
 
 	sBlk.s.s_magic = sBlk_3.s_magic;
 	sBlk.s.inodes = sBlk_3.inodes;
@@ -1850,14 +1937,22 @@
 	sBlk.guid_start = sBlk_3.guid_start;
 	sBlk.s.xattr_id_table_start = SQUASHFS_INVALID_BLK;
 
+    // CJH: Update super struct with override values
+    if(override.s_major)
+        sBlk.s.s_major = override.s_major;
+    if(override.s_minor)
+        sBlk.s.s_minor = override.s_minor;
+
 	/* Check the MAJOR & MINOR versions */
-	if(sBlk.s.s_major == 1 || sBlk.s.s_major == 2) {
+    // CJH: Added s_major override
+	if((sBlk.s.s_major == 1 || sBlk.s.s_major == 2)) {
 		sBlk.s.bytes_used = sBlk_3.bytes_used_2;
 		sBlk.uid_start = sBlk_3.uid_start_2;
 		sBlk.guid_start = sBlk_3.guid_start_2;
 		sBlk.s.inode_table_start = sBlk_3.inode_table_start_2;
 		sBlk.s.directory_table_start = sBlk_3.directory_table_start_2;
 		
+        // CJH: Added s_major override
 		if(sBlk.s.s_major == 1) {
 			sBlk.s.block_size = sBlk_3.block_size_1;
 			sBlk.s.fragment_table_start = sBlk.uid_start;
@@ -1893,7 +1988,11 @@
 	/*
 	 * 1.x, 2.x and 3.x filesystems use gzip compression.
 	 */
+    // CJH: Check to see if comp has alredy been defined
+    if(!comp)
+    {
 	comp = lookup_compressor("gzip");
+    }
 	return TRUE;
 
 failed_mount:
@@ -2106,11 +2205,15 @@
 			SQUASHFS_COMPRESSED_SIZE_BLOCK(entry->size), block_size,
 			&error);
 
+        /* CJH: Compression errors are displayed elsewhere
 		if(res == -1)
 			ERROR("%s uncompress failed with error code %d\n",
 				comp->name, error);
 		else
 			memcpy(entry->data, tmp, res);
+        */
+        if(res != -1)
+            memcpy(entry->data, tmp, res);
 
 		/*
 		 * block has been either successfully decompressed, or an error
@@ -2505,6 +2608,9 @@
 	int fragment_buffer_size = FRAGMENT_BUFFER_DEFAULT;
 	int data_buffer_size = DATA_BUFFER_DEFAULT;
 
+    // CJH: Initialize verbosity to FALSE
+    verbose = FALSE;
+
 	pthread_mutex_init(&screen_mutex, NULL);
 	root_process = geteuid() == 0;
 	if(root_process)
@@ -2611,6 +2717,83 @@
 		} else if(strcmp(argv[i], "-regex") == 0 ||
 				strcmp(argv[i], "-r") == 0)
 			use_regex = TRUE;
+        // CJH: Added -comp, -be, -le, -major, -minor options
+        else if(strcmp(argv[i], "-c") == 0 ||
+                strcmp(argv[i], "-comp") == 0) {
+            if(++i == argc) {
+                fprintf(stderr, "%s: -comp missing compression option\n",
+                    argv[0]);
+                exit(1);
+            }
+            comp = lookup_compressor(argv[i]);
+        } else if(strcmp(argv[i], "-major") == 0) {
+            if(++i == argc) {
+                fprintf(stderr, "%s: -major missing version option\n",
+                    argv[0]);
+                exit(1);
+            }
+            override.s_major = atoi(argv[i]);
+        } else if(strcmp(argv[i], "-minor") == 0) {
+            if(++i == argc) {
+                fprintf(stderr, "%s: -minor missing version option\n",
+                    argv[0]);
+                exit(1);
+            }
+            override.s_minor = atoi(argv[i]);
+        } else if(strcmp(argv[i], "-lc") == 0) {
+            if(++i == argc) {
+                fprintf(stderr, "%s: -lc missing value option\n",
+                    argv[0]);
+                exit(1);
+            }
+            override.lc.value = atoi(argv[i]);
+            override.lc.set = TRUE;
+        } else if(strcmp(argv[i], "-lp") == 0) {
+            if(++i == argc) {
+                fprintf(stderr, "%s: -lp missing value option\n",
+                    argv[0]);
+                exit(1);
+            }
+            override.lp.value = atoi(argv[i]);
+            override.lp.set = TRUE;
+        } else if(strcmp(argv[i], "-pb") == 0) {
+            if(++i == argc) {
+                fprintf(stderr, "%s: -pb missing value option\n",
+                    argv[0]);
+                exit(1);
+            }
+            override.pb.value = atoi(argv[i]);
+            override.pb.set = TRUE;
+        } else if(strcmp(argv[i], "-dict") == 0) {
+            if(++i == argc) {
+                fprintf(stderr, "%s: -dict missing value option\n",
+                    argv[0]);
+                exit(1);
+            }
+            override.dictionary_size.value = atoi(argv[i]);
+            override.dictionary_size.set = TRUE;
+        } else if(strcmp(argv[i], "-lzma-offset") == 0) {
+            if(++i == argc) {
+                fprintf(stderr, "%s: -lzma-offset missing value option\n",
+                    argv[0]);
+                exit(1);
+            }
+            override.offset.value = atoi(argv[i]);
+            override.offset.set = TRUE;
+        } else if(strcmp(argv[i], "-be") == 0)
+#if __BYTE_ORDER == __BIG_ENDIAN
+            swap = 0;
+#else
+            swap = 1;
+#endif
+        else if(strcmp(argv[i], "-le") == 0)
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+            swap = 0;
+#else
+            swap = 1;
+#endif
+        else if(strcmp(argv[i], "-trace") == 0)
+            verbose = TRUE;
 		else
 			goto options;
 	}
@@ -2674,6 +2857,22 @@
 				"regular expressions\n");
 			ERROR("\t\t\t\trather than use the default shell "
 				"wildcard\n\t\t\t\texpansion (globbing)\n");
+            // CJH: Added -comp, -be, -le, -major, -minor, -trace and lzma options help output
+            ERROR("\n");
+            ERROR("\t-trace\t\t\tEnable verbose trace output\n");
+            ERROR("\t-lc <value>\t\tSet the lzma-adaptive lc parameter [0-4]\n");
+            ERROR("\t-lp <value>\t\tSet the lzma-adaptive lp parameter [0-4]\n");
+            ERROR("\t-pb <value>\t\tSet the lzma-adaptive pb parameter [0-8]\n");
+            ERROR("\t-dict <value>\t\tSet the lzma-adaptive dictionary size\n");
+            ERROR("\t-lzma-offset <value>\tSet the lzma-adaptive LZMA data offset\n");
+            ERROR("\t-major <version>\tManually set the SquashFS major "
+                "version number\n");
+            ERROR("\t-minor <version>\tManually set the SquashFS minor "
+                "version number\n");
+            ERROR("\t-be\t\t\tTreat the filesystem as big endian\n");
+            ERROR("\t-le\t\t\tTreat the filesystem as little endian\n");
+			ERROR("\t-c[omp] <decompressor>\tSpecify the "
+				"decompressor to use\n");
 			ERROR("\nDecompressors available:\n");
 			display_compressors("", "");
 		}
