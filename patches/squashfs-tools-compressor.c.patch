--- squashfs-tools/compressor.c	2016-08-25 09:06:22.983529595 -0400
+++ squashfs-tools-patched/compressor.c	2016-08-25 09:06:03.223530354 -0400
@@ -25,6 +25,9 @@
 #include "compressor.h"
 #include "squashfs_fs.h"
 
+// CJH: Added these includes
+#include "error.h"
+
 #ifndef GZIP_SUPPORT
 static struct compressor gzip_comp_ops =  {
 	ZLIB_COMPRESSION, "gzip"
@@ -65,6 +68,9 @@
 extern struct compressor xz_comp_ops;
 #endif
 
+extern struct compressor lzma_alt_comp_ops;
+extern struct compressor lzma_wrt_comp_ops;
+extern struct compressor lzma_adaptive_comp_ops;
 
 static struct compressor unknown_comp_ops = {
 	0, "unknown"
@@ -74,6 +80,10 @@
 struct compressor *compressor[] = {
 	&gzip_comp_ops,
 	&lzma_comp_ops,
+    // CJH: Added additional LZMA decompressors. Order is intentional.
+    &lzma_adaptive_comp_ops,
+    &lzma_alt_comp_ops,
+    &lzma_wrt_comp_ops,
 	&lzo_comp_ops,
 	&lz4_comp_ops,
 	&xz_comp_ops,
@@ -81,6 +91,19 @@
 };
 
 
+int lookup_compressor_index(char *name)
+{
+    int i;
+
+    for(i = 0; compressor[i]->id; i++)
+    {
+        if(strcmp(name, compressor[i]->name) == 0)
+            return i;
+    }
+
+    return -1;
+}
+
 struct compressor *lookup_compressor(char *name)
 {
 	int i;
@@ -135,3 +158,67 @@
 					compressor[i]->name, str);
 		}
 }
+
+// CJH: calls the currently selected decompressor, unless that fails, then tries the other decompressors
+int detected_compressor_index = 0;
+int compressor_uncompress(struct compressor *comp, void *dest, void *src, int size, int block_size, int *error)
+{
+    int i = 0, retval = -1, default_compressor_id = -1;
+
+    if(detected_compressor_index)
+    {
+        retval = compressor[detected_compressor_index]->uncompress(dest, src, size, block_size, error);
+    }
+
+    if(retval < 1 && comp->uncompress)
+    {
+        if(!detected_compressor_index) ERROR("Trying to decompress using default %s decompressor...\n", comp->name);
+        
+        retval = comp->uncompress(dest, src, size, block_size, error);
+        
+        if(!detected_compressor_index)
+        {
+            if(retval > 0)
+            {
+                ERROR("Successfully decompressed with default %s decompressor\n", comp->name);
+                detected_compressor_index = lookup_compressor_index(comp->name);
+            }
+            else
+            {
+                TRACE("Default %s decompressor failed! [%d %d]\n", comp->name, retval, *error);
+            }
+        }
+    }
+
+    if(retval < 1)
+    {
+        default_compressor_id = comp->id;
+
+        for(i=0; compressor[i]->id; i++)
+        {
+            comp = compressor[i];
+            
+            if(comp->id != default_compressor_id && 
+               comp->id != compressor[detected_compressor_index]->id && 
+               comp->uncompress)
+            {
+                ERROR("Trying to decompress with %s...\n", comp->name);
+                retval = comp->uncompress(dest, src, size, block_size, error);
+                if(retval > 0)
+                {
+                    //TRACE("%s decompressor succeeded!\n", comp->name);
+                    ERROR("Detected %s compression\n", comp->name);
+                    detected_compressor_index = i;
+                    break;
+                }
+                else
+                {
+                    TRACE("%s decompressor failed! [%d %d]\n", comp->name, retval, *error);
+                }
+            }
+        }
+    }
+
+    return retval;
+}
+
diff --strip-trailing-cr -NBbaur squashfs-tools/compressor.h squashfs-tools-patched/compressor.h
